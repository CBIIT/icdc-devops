
pipeline {

	agent {
		node {
			label 'cicd_microservice'
		}
	}

  options {
  	ansiColor('xterm')
  }

  stages{

  	stage('set_params'){

  		steps{
  			script {

                    // Variables for input
                    //def inputConfig
                    //def inputTest

                    // Get the input
                    def userInput = input(
                            id: 'userInput', message: 'Enter build parameters:?',
                            parameters: [

                                    extendedChoice(name: 'Environment', 
									     defaultValue: 'dev',
										 multiSelectDelimiter: ',',
										 quoteValue: false,
										 saveJSONParameterToFile: false,
										 type: 'PT_SINGLE_SELECT',
										 value: 'dev,qa',
										 visibleItemCount: 5),
									
                                    [$class: 'CascadeChoiceParameter',
									     name: 'Branch',
										 choiceType: 'PT_SINGLE_SELECT',
										 filterLength: 1,
										 filterable: false,
										 randomName: 'choice-parameter-8988952787828020',
										 referencedParameters: 'Environment',
										 script: [$class: 'GroovyScript',
										 fallbackScript: [classpath: [],
										 oldScript: '',
										 sandbox: false,
										 script: ''],
										 script: [classpath: [],
										 oldScript: '',
										 sandbox: true,
										 script: '''env_value = Environment

                                                    def gettags = ("git ls-remote -h https://github.com/CBIIT/bento-ctdc-frontend.git").execute()
                                                    def tags = gettags.text.readLines().collect { it.split()[1].replaceAll(\'refs/heads/\', \'\').replaceAll(\'refs/tags/\', \'\').replaceAll("\\\\^\\\\{\\\\}", \'\')}
                                                    List tagnames = tags.collect{ \'\' + it + \'\' }
                                                    tagnames.add(0, "Show All Tags")

                                                    if(env_value.equalsIgnoreCase("dev")) {
                                                      for(int i=0; i < tagnames.size(); i++) {
                                                    	if(tagnames.get(i).equalsIgnoreCase("integration")) {
                                                    	  new_value = tagnames[i] + \':selected\'
                                                    	  tagnames.set(i, new_value);
                                                    	  }
                                                    	}
                                                      } else if(env_value.equalsIgnoreCase("qa")) {
                                                          for(int i=0; i < tagnames.size(); i++) {
                                                    	if(tagnames.get(i).equalsIgnoreCase("2.0.0")) {
                                                    	  new_value = tagnames[i] + \':selected\'
                                                    	  tagnames.set(i, new_value);
                                                    	  }
                                                    	}
                                                      } else {
                                                    	for(int i=0; i < tagnames.size(); i++) {
                                                    	  if(tagnames.get(i).equalsIgnoreCase("master")) {
                                                    		new_value = tagnames[i] + \':selected\'
                                                    		tagnames.set(i, new_value);
                                                    		}
                                                    	  }
                                                    	}

                                                    return tagnames''']]],
                            ])

                    // Save to variables. Default to empty string if not found.
                    env.ENVIRONMENT = userInput.Environment?:''
                    env.BRANCH = userInput.Branch?:''

                }
  		}

  	}

  	stage('echo_params'){

  		steps{
  			script {

                    // Echo to console
					echo("Variables:")
                    echo("Environment: ${ENVIRONMENT}")
                    echo("Branch: ${BRANCH}")

                }
  		}

  	}

  }
  post {

	success {
	
	    script {
				echo 'Run job B'
				build job: 'Test/params/test_b', parameters: [extendedChoice(name: 'Environment', value: "${ENVIRONMENT}"), CascadeChoiceParameter(name: 'Branch', value: "${BRANCH}")]
		}
	
	}
	
	cleanup {
	
		cleanWs()
    
	}

  }
}