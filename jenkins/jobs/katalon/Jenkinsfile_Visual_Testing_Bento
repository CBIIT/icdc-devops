pipeline {
	agent {
        node { 
			label "docker-katalon-vt-ec2"
			//label "docker-katalon-ch"
            }
        }

    parameters {

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/active-testing.git')

    string(defaultValue: "VT_Test.prj", 
        description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
        name: 'KatalonPrj')

    string(defaultValue: "Test Suites/MTP_22.11_ALL", 
        description: 'Enter the Katalon Suite Path (not including the test suite file):', 
        name: 'KatalonSuite')

//	extendedChoice( 
//        name: 'Profile', 
//        defaultValue: 'default', 
//        description: 'Choose the profile to use', 
//        type: 'PT_SINGLE_SELECT',
//        value: 'DEV_ICDC,QA_ICDC,STAGE_ICDC,PROD_ICDC,QA_CTDC,QA_MTP,QA_INS,QA_CCDC' )

	string(defaultValue: "", 
        description: 'Enter a list of email addresses to notify in case of test failures:', 
        name: 'EmailRecipients')

        }

    stages{
        stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.Branch}"]], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/active-testing.git']]])

                }
            }
//		stage('set Profile'){
//		    environment {
//                KATALON_PRJ         =   "${params.KatalonPrj}"
//                }
//			steps {
//                script {
//				    switch("${params.Profile}") {
//					case ~/[\w\/]+MTP$/:
//						PROJECT="MTP"
//						withCredentials([string(credentialsId: 'Sharepoint_Email', variable: 'results_email'),
//						  string(credentialsId: 'Sharepoint_Url_MTP', variable: 'sharepoint_url')]) {
//                            RESULTS_URL="${sharepoint_url}"
//							RESULTS_EMAIL="${results_email}"
//                            }
//                        break
//
//					}
//
//					switch("${params.Profile}") {
//                    case "QA_MTP":
//						TIER="QA"
//						withCredentials([file(credentialsId: 'Katalon_QA_MTP', variable: 'pass_file')]) {
//							PROFILE="${pass_file}"
//							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
//                            }
//                        break
//
//                       }
//                    }
//				}
//			}

		stage('run tests'){
            environment {
				KATALON_BROWSER     =   "Chrome"
//				KATALON_PROFILE     =   "${params.Profile}"
                KATALON_PRJ         =   "${params.KatalonPrj}"
                KATALON_SUITE_PATH  =   "${params.KatalonSuite}"
//				PROFILE_FILE        =   "${PROFILE}"
                }
            steps {

				script {
						withCredentials([string(credentialsId: 'Katalon_API_Key_VT', variable: 'api_key'),
						    string(credentialsId: 'Katalon_Org_ID_VT', variable: 'org_id')]) {

							sh label: 'Katalon-Tests', script: '''#!/bin/bash
								
								# Set datestamp for results file
								dateStamp=$(date +%Y%m%d)
								#reportFile="${KATALON_PROFILE}_${dateStamp}_build_${BUILD_NUMBER}"
								reportFile="${dateStamp}_build_${BUILD_NUMBER}"

								# Recreate the results directory
								rm -rf results && mkdir results
								
								# Create the output files directory (required for writing excel files)
								rm -rf OutputFiles && mkdir OutputFiles
								
								# Update profile filename
								#profile_file=$(basename $PROFILE_FILE)
								#profile_name="${profile_file%.*}"
								
								#echo "projectPath=$WORKSPACE/$KATALON_PRJ testSuitePath=$KATALON_SUITE_PATH executionProfile=$profile_name filename=$profile_file"
								
								# Run Katalon Tests
								#katalonc -noSplash -runMode=console --config -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="default" -browserType="$KATALON_BROWSER" -reportFolder="results" -reportFileName="$reportFile" -apiKey="$api_key" -orgID="$org_id"
								#katalonc -noSplash -runMode=console --config -projectPath="$WORKSPACE/$KATALON_PRJ" -testSuitePath="$KATALON_SUITE_PATH" -retry=0 -statusDelay=15 -browserType="TestCloud" -testcloudTunnel="false" -testcloudEnvironmentId="49" -apiKey="$api_key" -orgID="$org_id"
								/root/.katalon/8.6.0/Katalon_Studio_Engine_Linux_64-8.6.0/katalonc -noSplash -runMode=console --config -projectPath="$WORKSPACE/$KATALON_PRJ" -testSuitePath="$KATALON_SUITE_PATH" -retry=0 -statusDelay=15 -browserType="TestCloud" -testcloudTunnel="false" -testcloudEnvironmentId="49" -apiKey="$api_key" -orgID="$org_id"

								'''

							}
						}

                }
            }
        }
		post {
			always {

//				publishHTML([allowMissing: true,
//					alwaysLinkToLastBuild: false,
//					keepAll: false,
//					reportDir: 'results',
//					reportFiles: '*.html',
//					reportName: 'HTML Report',
//					reportTitles: ''])

				script {

					sh label: 'Zip-Katalon-Results', script: '''#!/bin/bash

					mv /etc/apt/sources.list.d/google-chrome.list /etc/apt/sources.list.d/google-chrome.list.bak && apt-get update && apt-get install -y zip
					
					resultsFile=$(basename results/*.html)
					zipFile=$(basename -s .html results/*.html)
					
					zip -r results/$zipFile.zip OutputFiles
					zip -u results/$zipFile.zip results/$resultsFile

					'''

				}
				
//				emailext(attachmentsPattern: 'results/*.zip',
//					body: "Katalon Test Results - ${PROJECT}.${TIER}.${BUILD_NUMBER}",
//                    subject: "Katalon Test Results - ${PROJECT}.${TIER}.${BUILD_NUMBER}",
//                    to: "${RESULTS_EMAIL}")

				script {
				
				    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash
				
					project=''' + PROJECT + '''
					tier=''' + TIER + '''
					inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")

					# Get test stats
					totalTestCases="$(grep -c '<testcase' $inputFile)"
					passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
					failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
					errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"
				
					# function to read output file: JUnit.xml
					parse_results_xml(){
						error_message="Katalon Test results for the latest run on $project $tier (browser tested: $Browser): \\n\\n Total Tests Cases:     $totalTestCases \\n Passed Test Cases:     $passedTestCases \\n Failed Test Cases:     $failedTestCases \\n Errored Test Cases:    $errorTestCases \\n\\n"

						IFS=$'\\n'
						for line in $(grep '<testcase' $inputFile)
						do
						  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
					      then
							  error_message+="$(echo $line | cut -d '=' -f 2 | cut -d '"' -f 2) \\n "
						  fi
						done
						}
				
						# Get test failures
						parse_results_xml
												
						error_message="\'$error_message\'"
						echo $error_message
				
                      ''',
						returnStdout: true).trim()
				
                    }

				script {
					EMAIL_BODY = sh (label: 'Get-Email-Body', script: '''#!/bin/bash

					emailBody=''' + ERROR_OUTPUT + '''
					resultsUrl=''' + RESULTS_URL + '''
					resultsFile=$(basename results/*.zip)
					emailBody="<b> $emailBody"
					emailBody=${emailBody/\\\\n\\\\n/</b><br><br>}
					emailBody=${emailBody//\\\\n/<br>}
					emailBody="$emailBody <br><br><br> The results of this test run can be found at:  <a href=\\\"$resultsUrl\\\">$resultsFile</a>"
					echo $emailBody

					''',
					returnStdout: true).trim()

					}

				emailext(attachmentsPattern: 'results/*.zip',
					mimeType: 'text/html',
					body: "${EMAIL_BODY}",
					subject: 'Katalon Tests: results attached',
					to: "${EmailRecipients}")
					
				
				}
			
//			failure {
//
//				script {
//
//				    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash
//
//					project=''' + PROJECT + '''
//					tier=''' + TIER + '''
//					inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")
//
//					# Get test stats
//					totalTestCases="$(grep -c '<testcase' $inputFile)"
//					passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
//					failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
//					errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"
//
//					# function to read output file: JUnit.xml
//					parse_results_xml(){
//						error_message="Katalon Test results for the latest run on $project $tier (browser tested: $Browser): \\n\\n Total Tests Cases:     $totalTestCases \\n Passed Test Cases:     $passedTestCases \\n Failed Test Cases:     $failedTestCases \\n Errored Test Cases:    $errorTestCases \\n\\n"
//
//						IFS=$'\\n'
//						for line in $(grep '<testcase' $inputFile)
//						do
//						  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
//					      then
//							  error_message+="$(echo $line | cut -d '=' -f 2 | cut -d '"' -f 2) \\n "
//						  fi
//						done
//						}
//
//						# Get test failures
//						parse_results_xml
//
//						error_message="\'$error_message\'"
//						echo $error_message
//
//                      ''',
//						returnStdout: true).trim()
//
//                    }
//
//				script {
//
//					withCredentials([string(credentialsId: 'Katalon_Slack_URL', variable: 'slack_url')]) {
//
//						sh label: 'Katalon-Results-Slack', script: '''#!/bin/bash
//
//						slackHeaders="\'Content-type: application/json\'"
//
//						# POST function to send to Slack
//						post_message_to_slack(){
//								curlCMD="curl --silent --max-time 10 --request POST --header $slackHeaders --data $payload $slack_url"
//								slackError=$(eval $curlCMD)
//								echo "Slack Error:   $slackError"
//								}
//
//						errorOutput=''' + ERROR_OUTPUT + '''
//						resultsUrl=''' + RESULTS_URL + '''
//						resultsFile=$(basename results/*.zip)
//						errorOutput="$errorOutput \\n\\n @<!channel> The results of this test run can be found at:  <$resultsUrl|$resultsFile>"
//						payload="\'{\\\"text\\\":\\\"$errorOutput\\\"}\'"
//						post_message_to_slack
//							'''
//
//						}
//
//					}
//
//				}
				
			cleanup {
	
	            cleanWs()
    
	            }

			}
	}