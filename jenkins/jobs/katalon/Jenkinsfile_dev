pipeline {
	agent {
        node {
			label "docker-katalon-ch"
            }
        }

    parameters {

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/Commons_Automation')

    string(defaultValue: "Commons_Automation.prj", 
        description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
        name: 'KatalonPrj')

    string(defaultValue: "Test Suites/Canine_TestSuite", 
        description: 'Enter the Katalon Suite Path (not including the test suite file):', 
        name: 'KatalonSuite')

	extendedChoice( 
        name: 'Profile', 
        defaultValue: 'Katalon_Dev_ICDC', 
        description: 'Choose the profile to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'Katalon_Dev_ICDC,Katalon_Dev_CTDC' )

	string(defaultValue: "gayathri.radhakrishnan@nih.gov,sohil.sohil@nih.gov", 
        description: 'Enter a list of email addresses to notify in case of test failures:', 
        name: 'EmailRecipients')

        }

    stages{
        stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.Tag}"]], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/Commons_Automation']]])

                }
            }

		stage('set Profile'){
		    environment {
                KATALON_PRJ         =   "${params.KatalonPrj}"
                }
			steps {
                script {
                    switch("${params.Profile}") {
					case "Katalon_Dev_ICDC":
					    withCredentials([file(credentialsId: 'Katalon_Dev_ICDC', variable: 'pass_file')]) {
                            PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					case "Katalon_Dev_CTDC":
                        withCredentials([file(credentialsId: 'Katalon_Dev_CTDC', variable: 'pass_file')]) {
                            PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break
						
                       }
                    }
				}
			}

		stage('run tests'){
            environment {
				KATALON_BROWSER     =   "Chrome"
				KATALON_PROFILE     =   "${params.Profile}"
                KATALON_PRJ         =   "${params.KatalonPrj}"
                KATALON_SUITE_PATH  =   "${params.KatalonSuite}"
				PROFILE_FILE        =   "${PROFILE}"
                }
				
            steps {

				script {
						withCredentials([string(credentialsId: 'Katalon_API_Key', variable: 'api_key'),
						    string(credentialsId: 'Katalon_Org_ID', variable: 'org_id')]) {

							sh label: 'Katalon-Tests', script: '''#!/bin/bash
								
								# Set datestamp for results file
								dateStamp=$(date +%Y%m%d)
								reportFile="${KATALON_PROFILE}_${dateStamp}_build_${BUILD_NUMBER}"

								# Recreate the results directory
								rm -rf results && mkdir results
								
								# Create the output files directory (required for writing excel files)
								rm -rf OutputFiles && mkdir OutputFiles
								
								# Update profile filename
								profile_file=$(basename $PROFILE_FILE)
								profile_name="${profile_file%.*}"
								
								#echo "projectPath=$KATALON_PRJ testSuitePath=$KATALON_SUITE_PATH executionProfile=$profile_name filename=$profile_file"
								
								# Run Katalon Tests
								katalonc -noSplash -runMode=console --config -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="$profile_name" -browserType="$KATALON_BROWSER (headless)" -reportFolder="results" -reportFileName="$reportFile" -apiKey="$api_key" -orgID="$org_id"

								'''

							}
						}

                }
            }
        }
		post {
			always {

				publishHTML([allowMissing: true,
					alwaysLinkToLastBuild: false,
					keepAll: false,
					reportDir: 'results',
					reportFiles: '*.html',
					reportName: 'HTML Report',
					reportTitles: ''])
				
				script {

					sh label: 'Zip-Katalon-Results', script: '''#!/bin/bash

					mv /etc/apt/sources.list.d/google-chrome.list /etc/apt/sources.list.d/google-chrome.list.bak && apt-get update && apt-get install -y zip
					
					resultsFile=$(basename results/*.html)
					zipFile=$(basename -s .html results/*.html)
					
					zip -r results/$zipFile.zip OutputFiles
					zip -u results/$zipFile.zip results/$resultsFile

					'''

				}

				emailext(attachmentsPattern: 'results/*.zip',
                    body: 'Katalon Test Results',
                    subject: 'Katalon Test Results',
                    to: "${BOX_EMAIL}")

			}
	}
}	