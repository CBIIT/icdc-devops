pipeline {
	agent {
        node {
            //label "${AGENT_LABEL}"
			label "docker-katalon-ch"
            }
        }
	environment { 
        katalonVer = '7.2.6'
		chromedriverVer = '83.0.4103.39'
		geckodriverVer = '0.26.0'
		}
    parameters {

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/Commons_Automation')

    string(defaultValue: "Commons_Automation.prj", 
        description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
        name: 'KatalonPrj')

    string(defaultValue: "Test Suites/Bento_TestSuite", 
        description: 'Enter the Katalon Suite Path (not including the test suite file):', 
        name: 'KatalonSuite')

    extendedChoice( 
        name: 'Browser', 
        defaultValue: 'Chrome', 
        description: 'Choose the browser (headless) to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'Chrome,Firefox' )
		
	extendedChoice( 
        name: 'Profile', 
        defaultValue: 'QA_PROD', 
        description: 'Choose the profile to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'QA_PROD,PERF_PROD,BENTO_ICDC,BENTO_CTDC,CDS_QA,GMB_QA,INS_DEV,BENTO_PROD' )

	string(defaultValue: "gayathri.radhakrishnan@nih.gov,laxmi.lolla@nih.gov,sohil.sohil@nih.gov", 
        description: 'Enter a list of email addresses to notify in case of test failures:', 
        name: 'EmailRecipients')

        }

    tools {
        jdk 'Default' 
        }

    stages{
        stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.Tag}"]], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/Commons_Automation']]])

                }
            }
		stage('set Profile'){
		    environment {
                KATALON_PRJ         =   "${params.KatalonPrj}"
                }
			steps {
                script {
				
					switch("${params.Profile}") {
                    case ~/[\w\/]+PROD$/:
						PROJECT="Bento"
						withCredentials([string(credentialsId: 'Sharepoint_Email', variable: 'results_email'),
						    string(credentialsId: 'Sharepoint_Url_Bento', variable: 'sharepoint_url')]) {
                                RESULTS_URL="${sharepoint_url}"
						        RESULTS_EMAIL="${results_email}"
                            }
                        break

					}

                    switch("${params.Profile}") {

					// BENTO
                    case "QA_PROD":
						TIER="QA"
						withCredentials([file(credentialsId: 'Katalon_QA_PROD', variable: 'pass_file')]) {
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					case "PERF_PROD":
						TIER="Perf"
						withCredentials([file(credentialsId: 'Katalon_PERF_PROD', variable: 'pass_file')]) {
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					case "BENTO_PROD":
						TIER="Prod"
						withCredentials([file(credentialsId: 'Katalon_BENTO_PROD', variable: 'pass_file')]) {
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					// BENTO_ICDC
					case "BENTO_ICDC":
						WIKI_PAGE="442632045"
						PROJECT="Bento"
						TIER="ICDC"
						withCredentials([string(credentialsId: 'Box_Email_BENTO_ICDC', variable: 'box_email'),
						  string(credentialsId: 'Box_Url_BENTO_ICDC', variable: 'box_url'),
						  file(credentialsId: 'Katalon_ICDC_PROD', variable: 'pass_file')]) {
                            RESULTS_EMAIL="${box_email}"
							BOX_URL="${box_url}"
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					// BENTO_CTDC
					case "BENTO_CTDC":
						WIKI_PAGE="442632045"
						PROJECT="Bento"
						TIER="CTDC"
						withCredentials([string(credentialsId: 'Box_Email_BENTO_CTDC', variable: 'box_email'),
						  string(credentialsId: 'Box_Url_BENTO_CTDC', variable: 'box_url'),
						  file(credentialsId: 'Katalon_CTDC_PROD', variable: 'pass_file')]) {
                            RESULTS_EMAIL="${box_email}"
							BOX_URL="${box_url}"
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					// CDS
					case "CDS_QA":
						WIKI_PAGE="442632045"
						PROJECT="Bento"
						TIER="CDS"
						withCredentials([string(credentialsId: 'Box_Email_BENTO_CDS', variable: 'box_email'),
						  string(credentialsId: 'Box_Url_BENTO_CDS', variable: 'box_url'),
						  file(credentialsId: 'Katalon_CDS_PROD', variable: 'pass_file')]) {
                            RESULTS_EMAIL="${box_email}"
							BOX_URL="${box_url}"
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					// GMB
					case "GMB_QA":
						WIKI_PAGE="442632045"
						PROJECT="Bento"
						TIER="GMB"
						withCredentials([string(credentialsId: 'Box_Email_BENTO_GMB', variable: 'box_email'),
						  string(credentialsId: 'Box_Url_BENTO_GMB', variable: 'box_url'),
						  file(credentialsId: 'Katalon_GMB_PROD', variable: 'pass_file')]) {
                            RESULTS_EMAIL="${box_email}"
							BOX_URL="${box_url}"
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break

					// INS
					case "INS_DEV":
						WIKI_PAGE="442632045"
						PROJECT="Bento"
						TIER="INS"
						withCredentials([string(credentialsId: 'Box_Email_BENTO_INS', variable: 'box_email'),
						  string(credentialsId: 'Box_Url_BENTO_INS', variable: 'box_url'),
						  file(credentialsId: 'Katalon_INS_PROD', variable: 'pass_file')]) {
                            RESULTS_EMAIL="${box_email}"
							BOX_URL="${box_url}"
							PROFILE="${pass_file}"
							sh "cp ${pass_file} ${WORKSPACE}/Profiles/"
                            }
                        break
					
                       }
                    }
				}
			}
		stage('run tests'){
            environment {
				KATALON_BROWSER     =   "${params.Browser}"
				KATALON_PROFILE     =   "${params.Profile}"
                KATALON_PRJ         =   "${params.KatalonPrj}"
                KATALON_SUITE_PATH  =   "${params.KatalonSuite}"
				PROFILE_FILE        =   "${PROFILE}"
                }
            steps {

				script {
						withCredentials([string(credentialsId: 'Katalon_API_Key', variable: 'api_key'),
						    string(credentialsId: 'Katalon_Org_ID', variable: 'org_id')]) {

							sh label: 'Katalon-Tests', script: '''#!/bin/bash
								
								# Set datestamp for results file
								dateStamp=$(date +%Y%m%d)
								reportFile="${KATALON_PROFILE}_${dateStamp}_build_${BUILD_NUMBER}"

								# Recreate the results directory
								rm -rf results && mkdir results
								
								# Create the output files directory (required for writing excel files)
								rm -rf OutputFiles && mkdir OutputFiles
								
								# Update profile filename
								profile_file=$(basename $PROFILE_FILE)
								profile_name="${profile_file%.*}"
								
								#################### UPDATE CHROME DRIVER (v108 - for Katalonstudio 5.5) ####################

								# Echo versions
								echo "Pre Update:"
								google-chrome --version
								/opt/katalonstudio/configuration/resources/drivers/chromedriver_linux64/chromedriver --version
								
								# get chromedriver v108.x
								wget https://chromedriver.storage.googleapis.com/108.0.5359.71/chromedriver_linux64.zip
								
								# backup and replace chromedriver
								mv /opt/katalonstudio/configuration/resources/drivers/chromedriver_linux64/chromedriver /opt/katalonstudio/configuration/resources/drivers/chromedriver_linux64/chromedriver.bak
								unzip chromedriver_linux64.zip
								mv chromedriver /opt/katalonstudio/configuration/resources/drivers/chromedriver_linux64/
								
								# Echo versions
								echo "Post Update:"
								google-chrome --version
								/opt/katalonstudio/configuration/resources/drivers/chromedriver_linux64/chromedriver --version
								
								#############################################################################################
								
								#echo "projectPath=$WORKSPACE/$KATALON_PRJ testSuitePath=$KATALON_SUITE_PATH executionProfile=$profile_name filename=$profile_file"
								
								# Run Katalon Tests
								#katalonc -noSplash -runMode=console --config -webui.autoUpdateDrivers=true -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="$profile_name" -browserType="$KATALON_BROWSER (headless)" -reportFolder="results" -reportFileName="$reportFile" -apiKey="$api_key" -orgID="$org_id"
								katalonc -noSplash -runMode=console --config -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="$profile_name" -browserType="$KATALON_BROWSER (headless)" -reportFolder="results" -reportFileName="$reportFile" -apiKey="$api_key" -orgID="$org_id"

								'''

							}
						}

                }
            }
        }
		post {
			always {

				publishHTML([allowMissing: true,
					alwaysLinkToLastBuild: false,
					keepAll: false,
					reportDir: 'results',
					reportFiles: '*.html',
					reportName: 'HTML Report',
					reportTitles: ''])

				script {

					sh label: 'Zip-Katalon-Results', script: '''#!/bin/bash

					//apt-get update && apt-get install -y apt-transport-https
					
					//apt-get update && apt-get install -y zip
					
					resultsFile=$(basename results/*.html)
					zipFile=$(basename -s .html results/*.html)
					
					zip -r results/$zipFile.zip OutputFiles
					#zip -u results/$zipFile.zip results/$resultsFile
					zip -u -r results/$zipFile.zip results

					'''

				}
				
				emailext(attachmentsPattern: 'results/*.zip',
					body: "Katalon Test Results - ${PROJECT}.${TIER}.${BUILD_NUMBER}",
                    subject: "Katalon Test Results - ${PROJECT}.${TIER}.${BUILD_NUMBER}",
                    to: "${RESULTS_EMAIL}")

				script {
				
				    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash

					project=''' + PROJECT + '''
					tier=''' + TIER + '''
					inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")

					# Get test stats
					totalTestCases="$(grep -c '<testcase' $inputFile)"
					passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
					failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
					errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"

					# function to read output file: JUnit.xml
					parse_results_xml(){
						error_message="Katalon Test results for the latest run on $project $tier (browser tested: $Browser): \\n\\n Total Tests Cases:     $totalTestCases \\n Passed Test Cases:     $passedTestCases \\n Failed Test Cases:     $failedTestCases \\n Errored Test Cases:    $errorTestCases \\n\\n"

						IFS=$'\\n'
						for line in $(grep '<testcase' $inputFile)
						do
						  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
					      then
							  error_message+="$(echo $line | cut -d '=' -f 2 | cut -d '"' -f 2) \\n "
						  fi
						done
						}

						# Get test failures
						parse_results_xml

						error_message="\'$error_message\'"
						echo $error_message

                      ''',
						returnStdout: true).trim()

                    }

				script {
					EMAIL_BODY = sh (label: 'Get-Email-Body', script: '''#!/bin/bash

					emailBody=''' + ERROR_OUTPUT + '''
					resultsUrl=''' + RESULTS_URL + '''
					resultsFile=$(basename results/*.zip)
					emailBody="<b> $emailBody"
					emailBody=${emailBody/\\\\n\\\\n/</b><br><br>}
					emailBody=${emailBody//\\\\n/<br>}
					emailBody="$emailBody <br><br><br> The results of this test run can be found in Box:  <a href=\\\"$resultsUrl\\\">$resultsFile</a>"
					echo $emailBody

					''',
					returnStdout: true).trim()

					}

				emailext(attachmentsPattern: 'results/*.zip',
					mimeType: 'text/html',
					body: "${EMAIL_BODY}",
					subject: 'Katalon Tests: results attached',
					to: "${EmailRecipients}")

				}

			failure {

				script {

				    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash

					project=''' + PROJECT + '''
					tier=''' + TIER + '''
					inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")

					# Get test stats
					totalTestCases="$(grep -c '<testcase' $inputFile)"
					passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
					failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
					errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"

					# function to read output file: JUnit.xml
					parse_results_xml(){
						error_message="Katalon Test results for the latest run on $project $tier (browser tested: $Browser): \\n\\n Total Tests Cases:     $totalTestCases \\n Passed Test Cases:     $passedTestCases \\n Failed Test Cases:     $failedTestCases \\n Errored Test Cases:    $errorTestCases \\n\\n"

						IFS=$'\\n'
						for line in $(grep '<testcase' $inputFile)
						do
						  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
					      then
							  error_message+="$(echo $line | cut -d '=' -f 2 | cut -d '"' -f 2) \\n "
						  fi
						done
						}

						# Get test failures
						parse_results_xml

						error_message="\'$error_message\'"
						echo $error_message

                      ''',
						returnStdout: true).trim()

                    }

				script {

					withCredentials([string(credentialsId: 'Katalon_Slack_URL', variable: 'slack_url')]) {

						sh label: 'Katalon-Results-Slack', script: '''#!/bin/bash

						slackHeaders="\'Content-type: application/json\'"

						# POST function to send to Slack
						post_message_to_slack(){
								curlCMD="curl --silent --max-time 10 --request POST --header $slackHeaders --data $payload $slack_url"
								slackError=$(eval $curlCMD)
								echo "Slack Error:   $slackError"
								}

						errorOutput=''' + ERROR_OUTPUT + '''
						resultsUrl=''' + RESULTS_URL + '''
						resultsFile=$(basename results/*.zip)
						errorOutput="$errorOutput \\n\\n @<!channel> The results of this test run can be found in Box:  <$resultsUrl|$resultsFile>"
						payload="\'{\\\"text\\\":\\\"$errorOutput\\\"}\'"
						post_message_to_slack
							'''

						}

					}
					
				}

			cleanup {

	            cleanWs()

	            }

			}
	}